mod code;

enum Code {
	// Literal
	XS_CODE_NULL,
	XS_CODE_UNDEFINED,
	XS_CODE_NUMBER,
	XS_CODE_STRING_1,
	XS_CODE_STRING_2,
	XS_CODE_STRING_4,
	XS_CODE_STRING_ARCHIVE_1,
	XS_CODE_STRING_ARCHIVE_2,
	XS_CODE_STRING_ARCHIVE_4,
	XS_CODE_INTEGER_1,
	XS_CODE_INTEGER_2,
	XS_CODE_INTEGER_4,
	XS_CODE_TRUE,
	XS_CODE_FALSE,
    XS_CODE_BIGINT_1,
	XS_CODE_BIGINT_2,

	// Control flow
	XS_CODE_BRANCH_1,
	XS_CODE_BRANCH_2,
	XS_CODE_BRANCH_4,
	//XS_CODE_BRANCH_CHAIN_1,
	//XS_CODE_BRANCH_CHAIN_2,
	//XS_CODE_BRANCH_CHAIN_4,
	XS_CODE_BRANCH_COALESCE_1,
	XS_CODE_BRANCH_COALESCE_2,
	XS_CODE_BRANCH_COALESCE_4,
	XS_CODE_BRANCH_ELSE_1,
	XS_CODE_BRANCH_ELSE_2,
	XS_CODE_BRANCH_ELSE_4,
	XS_CODE_BRANCH_IF_1,
	XS_CODE_BRANCH_IF_2,
	XS_CODE_BRANCH_IF_4,
	XS_CODE_BRANCH_STATUS_1,
	XS_CODE_BRANCH_STATUS_2,
	XS_CODE_BRANCH_STATUS_4,
	XS_CODE_FOR_OF,
	XS_CODE_RETURN,
	XS_CODE_THROW,
	XS_CODE_THROW_STATUS,
	XS_CODE_CATCH_1,
	XS_CODE_CATCH_2,
	XS_CODE_CATCH_4,


	// Operations
	XS_CODE_ADD,
	XS_CODE_SUBTRACT,
	XS_CODE_MODULO,
	XS_CODE_MULTIPLY,
	XS_CODE_DIVIDE,
	XS_CODE_EXPONENTIATION,

	XS_CODE_VOID,
	XS_CODE_PLUS,
	XS_CODE_MINUS,
	XS_CODE_INCREMENT,
	XS_CODE_DECREMENT,
	XS_CODE_TYPEOF,

	XS_CODE_LESS,
	XS_CODE_LESS_EQUAL,
	XS_CODE_STRICT_EQUAL,
	XS_CODE_STRICT_NOT_EQUAL,
	XS_CODE_MORE,
	XS_CODE_MORE_EQUAL,

	XS_CODE_NOT,

	// input: stack [a, b]
	// check if both are integer type
	// - then, x = a & b
	// output: stack [x]
	XS_CODE_BIT_AND,
	XS_CODE_BIT_NOT,
	XS_CODE_BIT_OR,
	XS_CODE_BIT_XOR,
	XS_CODE_LEFT_SHIFT,
	XS_CODE_SIGNED_RIGHT_SHIFT,
	XS_CODE_UNSIGNED_RIGHT_SHIFT,
	XS_CODE_TO_INSTANCE,
	XS_CODE_TO_NUMERIC,
	XS_CODE_TO_STRING,

	// Objects
	XS_CODE_OBJECT,

	// Functions
	XS_CODE_FUNCTION,
	XS_CODE_FUNCTION_ENVIRONMENT,
	XS_CODE_CALL,
	XS_CODE_ARGUMENT,
	XS_CODE_ARGUMENTS,

	// Arrays
	XS_CODE_ARRAY,

	// Store
	XS_CODE_CONST_LOCAL_1,
	XS_CODE_CONST_LOCAL_2,
	XS_CODE_CONST_CLOSURE_1,
	XS_CODE_CONST_CLOSURE_2,
	XS_CODE_LET_CLOSURE_1,
	XS_CODE_LET_CLOSURE_2,
	XS_CODE_LET_LOCAL_1,
	XS_CODE_LET_LOCAL_2,
	XS_CODE_GET_CLOSURE_1,
	XS_CODE_GET_CLOSURE_2,
	XS_CODE_GET_LOCAL_1,
	XS_CODE_GET_LOCAL_2,
	XS_CODE_GET_PROPERTY,
	XS_CODE_GET_PROPERTY_AT,
	XS_CODE_GET_RESULT,
	XS_CODE_GET_VARIABLE,
	XS_CODE_SET_CLOSURE_1,
	XS_CODE_SET_CLOSURE_2,
	XS_CODE_SET_HOME,
	XS_CODE_SET_LOCAL_1,
	XS_CODE_SET_LOCAL_2,
	XS_CODE_SET_PROPERTY,
	XS_CODE_SET_PROPERTY_AT,
	XS_CODE_SET_RESULT,
	XS_CODE_SET_VARIABLE,
	XS_CODE_DELETE_PROPERTY,
	XS_CODE_DELETE_PROPERTY_AT,
	XS_CODE_PULL_CLOSURE_1,
	XS_CODE_PULL_CLOSURE_2,
	XS_CODE_PULL_LOCAL_1,
	XS_CODE_PULL_LOCAL_2,
	XS_CODE_STORE_1,
	XS_CODE_STORE_2,
	XS_CODE_STORE_ARROW,

	// Stack
	XS_CODE_DUB,
	XS_CODE_DUB_AT,
	XS_CODE_POP,
	XS_CODE_SWAP,
	XS_CODE_UNWIND_1,
	XS_CODE_UNWIND_2,

	// Module


	// what are these
	XS_NO_CODE,
	XS_CODE_CODE_1,
	XS_CODE_CODE_2,
	XS_CODE_CODE_4,
	XS_CODE_CODE_ARCHIVE_1,
	XS_CODE_CODE_ARCHIVE_2,
	XS_CODE_CODE_ARCHIVE_4,
	XS_CODE_CONSTRUCTOR_FUNCTION,
	XS_CODE_COPY_OBJECT,
	XS_CODE_CURRENT,
	XS_CODE_END,
	XS_CODE_END_ARROW,
	XS_CODE_END_BASE,
	XS_CODE_END_DERIVED,
	XS_CODE_ENVIRONMENT,
	XS_CODE_EXCEPTION,
	XS_CODE_FILE,
	XS_CODE_GLOBAL,
	XS_CODE_HOST,
	XS_CODE_IMPORT,
	XS_CODE_IMPORT_META,
	XS_CODE_LINE,
	XS_CODE_MODULE,
	XS_CODE_NAME,
	XS_CODE_PROGRAM_ENVIRONMENT,
	XS_CODE_PROGRAM_REFERENCE,
	XS_CODE_REFRESH_CLOSURE_1,
	XS_CODE_REFRESH_CLOSURE_2,
	XS_CODE_REFRESH_LOCAL_1,
	XS_CODE_REFRESH_LOCAL_2,
	XS_CODE_REGEXP,
	XS_CODE_RESERVE_1,
	XS_CODE_RESERVE_2,
	XS_CODE_RESET_CLOSURE_1,
	XS_CODE_RESET_CLOSURE_2,
	XS_CODE_RESET_LOCAL_1,
	XS_CODE_RESET_LOCAL_2,
	XS_CODE_RETHROW,
	XS_CODE_RETRIEVE_1,
	XS_CODE_RETRIEVE_2,
	XS_CODE_RETRIEVE_TARGET,
	XS_CODE_RUN,
	XS_CODE_TARGET,
	XS_CODE_TEMPLATE,
	XS_CODE_TEMPLATE_CACHE,
	XS_CODE_TRANSFER,
	XS_CODE_UNCATCH,
	XS_CODE_COUNT
};

fn code_block_statement(stmt: &ast::BlockStatement) -> Vec<Code> {
	let mut codes = vec![];
	for stmt in stmt.stmts.iter() {
		codes.extend(code_statement(stmt));
	}
	codes
}